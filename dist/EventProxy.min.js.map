{"version":3,"sources":["EventProxy.js"],"names":["root","factory","define","amd","exports","_typeof","module","EventProxy","global","window","undefined","limitType","type","Error","isFunction","v","__slice","Array","prototype","slice","$eventLibary","default","queue","on","handler","this","currEventModel","push","src","temp","key","JSON","parse","stringify","deepClone","once","that","off","apply","arguments","eventModel","cbs","cbsLen","length","splice","emit","args","call","$aboutAll","allEventQueueIndex","arr","i","findIndex","eventQueue","$emitAll","isArray","$emitNormal","callBackArgs","success","reset","model","parameter","item","loop","error","console","warn","toString","stack","index","flattening","newArr","len","hasArray","concat","all"],"mappings":"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","file":"EventProxy.min.js","sourcesContent":["(function (root, factory) {\r\n    if (typeof define === 'function' && define.amd) {\r\n        define(function () {\r\n            return factory(root);\r\n        });\r\n    } else if (typeof exports === \"object\" && typeof module !== \"undefined\") {\r\n        module.exports = factory(root);\r\n    } else {\r\n        root.EventProxy = factory(root);\r\n    }\r\n})(typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : this, function (window) {\r\n    \"use strict\";\r\n\r\n    //限制类型\r\n    var limitType = function (type) {\r\n        if (type == 'default') throw new Error('The 1st argument must be a string except default')\r\n    }\r\n\r\n    var isFunction = function (v) {\r\n        return typeof v === 'function';\r\n    }\r\n\r\n    var __slice = Array.prototype.slice\r\n\r\n    //深度复制\r\n    var deepClone = function (src) {\r\n        var temp = {}\r\n        for (var key in src) {\r\n            temp[key] = src[key]\r\n        }\r\n        return JSON.parse(JSON.stringify(temp))\r\n    }\r\n\r\n    //将嵌套数组扁平化 例如：[[100, [102, 103]], 400, [500, 600]] -> [100, 102, 103, 400, 500, 600]\r\n    var flattening = function (arr) {\r\n        var newArr = []\r\n        var len = arr.length\r\n        var hasArray = false\r\n        for (var i = 0; i < len; i++) {\r\n            var item = arr[i]\r\n            if (Array.isArray(item)) {\r\n                newArr = newArr.concat(item)\r\n                hasArray = true\r\n            } else {\r\n                newArr.push(item)\r\n            }\r\n        }\r\n        if (!hasArray) return newArr\r\n        return flattening(newArr)\r\n    }\r\n\r\n    var findIndex = function (arr, key) {\r\n        for (var i = 0; i < arr.length; i++) {\r\n            if (arr[i] == key) return i\r\n        }\r\n        return false\r\n    }\r\n\r\n\r\n    //构造器\r\n    var EventProxy = function () {}\r\n\r\n\r\n    //事件库\r\n    EventProxy.prototype.$eventLibary = {\r\n        'default': {\r\n            type: 'default',\r\n            queue: []\r\n        }\r\n    }\r\n\r\n\r\n    //订阅事件\r\n    EventProxy.prototype.on = function (type, handler) {\r\n        limitType(type)\r\n\r\n        if (!isFunction(handler)) {\r\n            throw new Error('The handler of the event of ' + type + ' is not a function')\r\n        }\r\n\r\n        var $eventLibary = this.$eventLibary\r\n        var currEventModel = $eventLibary[type]\r\n        if (currEventModel) {\r\n            return currEventModel.queue.push(handler)\r\n        }\r\n        $eventLibary[type] = deepClone($eventLibary['default'])\r\n        $eventLibary[type].type = type\r\n        $eventLibary[type].queue.push(handler)\r\n    }\r\n\r\n\r\n    //订阅事件 只触发一次\r\n    EventProxy.prototype.once = function (type, handler) {\r\n        var that = this\r\n        function on () {\r\n            that.off(type, on)\r\n            handler.apply(null, arguments)\r\n        }\r\n        this.on(type, on)\r\n    }\r\n\r\n\r\n    //移除事件\r\n    EventProxy.prototype.off = function (type, handler) {\r\n        //all \r\n        if (!type) {\r\n            this.$eventLibary = {\r\n                'default': {\r\n                    type: 'default',\r\n                    queue: []\r\n                }\r\n            }\r\n            return;\r\n        }\r\n\r\n        var eventModel = this.$eventLibary[type]\r\n\r\n        //without event model\r\n        if (!eventModel) return;\r\n\r\n        //specity event\r\n        if (!handler) {\r\n            eventModel.queue = []\r\n            return;\r\n        }\r\n\r\n        //specity handler\r\n        var cbs = eventModel.queue\r\n        var cbsLen = cbs.length\r\n        var cb\r\n\r\n        while (cbsLen--) {\r\n            cb = cbs[cbsLen]\r\n            if (cb === handler) {\r\n                cbs.splice(cbsLen, 1)\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    //事件触发\r\n    EventProxy.prototype.emit = function () {\r\n        var type = arguments[0]\r\n        limitType(type)\r\n        var args = __slice.call(arguments, 1)\r\n        var eventModel = this.$eventLibary[type]\r\n        var $aboutAll = this.$aboutAll\r\n        var allEventQueueIndex = findIndex($aboutAll.eventQueue, type)\r\n\r\n        if (allEventQueueIndex !== false) {\r\n            this.$emitAll($aboutAll, args, allEventQueueIndex);\r\n        } else if (eventModel && Array.isArray(eventModel.queue)) {\r\n            this.$emitNormal(eventModel, args)\r\n        } else {\r\n            throw new Error('The event of ' + type + ' is not exist')\r\n        }\r\n    }\r\n\r\n\r\n    EventProxy.prototype.$aboutAll = {\r\n        eventQueue: [],\r\n        callBackArgs: [],\r\n        success: null,\r\n        reset: function () {\r\n            this.eventQueue = []\r\n            this.callBackArgs = []\r\n            this.success = null\r\n        }\r\n    }\r\n\r\n\r\n    EventProxy.prototype.$emitNormal = function (model, parameter) {\r\n        var loop = 0,\r\n            item;\r\n        var queue = model.queue\r\n        while (item = queue[loop++]) {\r\n            try {\r\n                item.apply(null, parameter)\r\n            } catch (error) {\r\n                console.warn(\r\n                    'This \\\"' + \r\n                    model.type + \r\n                    '\\\" event handler goes wrong, occured in :\\n\\n' + \r\n                    item.toString() + \r\n                    '\\n\\nThe error info as follow: \\n' + \r\n                    error.stack\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    EventProxy.prototype.$emitAll = function ($aboutAll, parameter, index) {\r\n        var eventQueue = $aboutAll.eventQueue\r\n        var callBackArgs = $aboutAll.callBackArgs\r\n        eventQueue.splice(index, 1)\r\n        callBackArgs[index] = parameter\r\n        //All事件队列已全部发布标志\r\n        if (eventQueue.length == 0) {\r\n            //合并参数，触发success回调，重置有关all的辅助参数\r\n            $aboutAll.callBackArgs = flattening(callBackArgs)\r\n            $aboutAll.success.call(null, $aboutAll.callBackArgs)\r\n            this.$aboutAll.reset()\r\n        }\r\n    }\r\n\r\n\r\n    //当eventQueue触发完后时，调用success\r\n    EventProxy.prototype.all = function (eventQueue, success) {\r\n        if (!Array.isArray(eventQueue) || !isFunction(success)) return\r\n        var $aboutAll = this.$aboutAll\r\n        $aboutAll.eventQueue = $aboutAll.eventQueue.concat(eventQueue)\r\n        $aboutAll.success = success\r\n    }\r\n\r\n    return EventProxy\r\n})"]}