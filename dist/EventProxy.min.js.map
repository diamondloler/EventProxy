{"version":3,"sources":["EventProxy.js"],"names":["root","factory","define","amd","exports","_typeof","module","EventProxy","global","window","undefined","eventType","limitType","type","Error","isFunction","v","__slice","Array","prototype","slice","defaultEventModel","default","queue","$eventLibary","on","handler","this","currEventModel","push","src","temp","key","JSON","parse","stringify","deepClone","once","that","off","apply","arguments","eventModel","cbs","loop","length","splice","emit","args","call","isArray","item","error","console","warn","toString","stack","all","eventQueue","success","len","argsCollection","consume","index","arr","i","findIndex","ArgsArray","flattening","newArr","hasArray","concat"],"mappings":"oOAAA,SAAAA,EAAAC,GACA,mBAAAC,QAAAA,OAAAC,IACAD,OAAA,WACA,OAAAD,EAAAD,KAEA,YAAA,oBAAAI,QAAA,YAAAC,QAAAD,WAAA,oBAAAE,OACAA,OAAAF,QAAAH,EAAAD,GAEAA,EAAAO,WAAAN,EAAAD,GARA,CAUA,oBAAAQ,OAAAA,OAAA,oBAAAC,OAAAA,YAAAC,EAAA,SAAAD,GAIA,IAiIAE,EAjIAC,EAAA,SAAAC,GACA,GAAA,WAAAA,EAAA,MAAA,IAAAC,MAAA,uDAGAC,EAAA,SAAAC,GACA,MAAA,mBAAAA,GAGAC,EAAAC,MAAAC,UAAAC,MAqCAC,EAAA,CACAC,QAAA,CACAT,KAAA,UACAU,MAAA,KAMAhB,EAAA,aA6IA,OAzIAA,EAAAY,UAAAK,aAAAH,EAIAd,EAAAY,UAAAM,GAAA,SAAAZ,EAAAa,GAGA,GAFAd,EAAAC,IAEAE,EAAAW,GACA,MAAA,IAAAZ,MAAA,+BAAAD,EAAA,sBAGA,IAAAW,EAAAG,KAAAH,aACAI,EAAAJ,EAAAX,GAEA,GAAAe,EACA,OAAAA,EAAAL,MAAAM,KAAAH,GAGAF,EAAAX,GAjEA,SAAAiB,GACA,IAAAC,EAAA,GACA,IAAA,IAAAC,KAAAF,EACAC,EAAAC,GAAAF,EAAAE,GAEA,OAAAC,KAAAC,MAAAD,KAAAE,UAAAJ,IA4DAK,CAAAZ,EAAA,SACAA,EAAAX,GAAAA,KAAAA,EACAW,EAAAX,GAAAU,MAAAM,KAAAH,IAKAnB,EAAAY,UAAAkB,KAAA,SAAAxB,EAAAa,GACA,IAAAY,EAAAX,KAOAA,KAAAF,GAAAZ,EALA,SAAAY,IACAa,EAAAC,IAAA1B,EAAAY,GACAC,EAAAc,MAAA,KAAAC,cAQAlC,EAAAY,UAAAoB,IAAA,SAAA1B,EAAAa,GAEA,GAAAb,EAAA,CAKA,IAAA6B,EAAAf,KAAAH,aAAAX,GAGA,GAAA6B,EAGA,GAAAhB,GAUA,IAJA,IAAAiB,EAAAD,EAAAnB,MACAqB,EAAAD,EAAAE,OAGAD,KAEA,GADAD,EAAAC,KACAlB,EAAA,CACAiB,EAAAG,OAAAF,EAAA,GACA,YAbAF,EAAAnB,MAAA,QAXAI,KAAAH,aAAAH,GAiCAd,EAAAY,UAAA4B,KAAA,WACA,IAAAlC,EAAAF,EAAA8B,UAAA,GAEA7B,EAAAC,GAEA,IAAAmC,EAAA/B,EAAAgC,KAAAR,UAAA,GACAC,EAAAf,KAAAH,aAAAX,GACAU,EAAAmB,EAAAnB,MAEA,IAAAmB,IAAAxB,MAAAgC,QAAA3B,GAkBA,MAAA,IAAAT,MAAA,gBAAAD,EAAA,iBAfA,IAFA,IACAsC,EADAP,EAAA,EAEAO,EAAA5B,EAAAqB,MACA,IACAO,EAAAX,MAAA,KAAAQ,GACA,MAAAI,GACAC,QAAAC,KACA,SACAZ,EAAA7B,KACA,+CACAsC,EAAAI,WACA,mCACAH,EAAAI,SAUAjD,EAAAY,UAAAsC,IAAA,SAAAC,EAAAC,GACA,GAAAzC,MAAAgC,QAAAQ,IAAA3C,EAAA4C,GAAA,CACA,IAAAC,EAAAF,EAAAb,OACAgB,EAAA,GAEAC,EAAA,WAGA,IAAAC,EAvIA,SAAAC,EAAAhC,GACA,IAAA,IAAAiC,EAAA,EAAAA,EAAAD,EAAAnB,OAAAoB,IACA,GAAAD,EAAAC,IAAAjC,EAAA,OAAAiC,EAEA,OAAA,EAmIAC,CAAAR,EAAA/C,GAEA,IAAA,IAAAoD,EAAA,CACA,IAAAI,EAAAlD,EAAAgC,KAAAR,WAGAoB,EAAAE,GAAAI,IAKAP,GAAAD,EAAAV,KAAA,KAnKA,SAAAmB,EAAAJ,GAIA,IAHA,IAAAK,EAAA,GACAT,EAAAI,EAAAnB,OACAyB,GAAA,EACAL,EAAA,EAAAA,EAAAL,EAAAK,IAAA,CACA,IAAAd,EAAAa,EAAAC,GACA/C,MAAAgC,QAAAC,IACAkB,EAAAA,EAAAE,OAAApB,GACAmB,GAAA,GAEAD,EAAAxC,KAAAsB,GAGA,OAAAmB,EACAF,EAAAC,GADAA,EAsJAD,CAAAP,KAGA,GAAAD,EAGA,IAFA,IACA5B,EADAiC,EAAA,EAEAjC,EAAA0B,EAAAO,MACAtC,KAAAU,KAAAL,EAAA8B,KAKAvD","file":"EventProxy.min.js","sourcesContent":["(function (root, factory) {\r\n    if (typeof define === 'function' && define.amd) {\r\n        define(function () {\r\n            return factory(root);\r\n        });\r\n    } else if (typeof exports === \"object\" && typeof module !== \"undefined\") {\r\n        module.exports = factory(root);\r\n    } else {\r\n        root.EventProxy = factory(root);\r\n    }\r\n})(typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : this, function (window) {\r\n    \"use strict\";\r\n\r\n    // limit type\r\n    var limitType = function (type) {\r\n        if (type == 'default') throw new Error('The 1st argument must be a string except \\\"default\\\"')\r\n    }\r\n\r\n    var isFunction = function (v) {\r\n        return typeof v === 'function';\r\n    }\r\n\r\n    var __slice = Array.prototype.slice\r\n\r\n    // clone deep\r\n    var deepClone = function (src) {\r\n        var temp = {}\r\n        for (var key in src) {\r\n            temp[key] = src[key]\r\n        }\r\n        return JSON.parse(JSON.stringify(temp))\r\n    }\r\n    \r\n    // to flatten for nested array , for exampleï¼š[[100, [102, 103]], 400, [500, 600]] -> [100, 102, 103, 400, 500, 600]\r\n    var flattening = function (arr) {\r\n        var newArr = []\r\n        var len = arr.length\r\n        var hasArray = false\r\n        for (var i = 0; i < len; i++) {\r\n            var item = arr[i]\r\n            if (Array.isArray(item)) {\r\n                newArr = newArr.concat(item)\r\n                hasArray = true\r\n            } else {\r\n                newArr.push(item)\r\n            }\r\n        }\r\n        if (!hasArray) return newArr\r\n        return flattening(newArr)\r\n    }\r\n\r\n    var findIndex = function (arr, key) {\r\n        for (var i = 0; i < arr.length; i++) {\r\n            if (arr[i] == key) return i\r\n        }\r\n        return false\r\n    }\r\n\r\n\r\n    var defaultEventModel = {\r\n        'default': {\r\n            type: 'default',\r\n            queue: []\r\n        }\r\n    }\r\n\r\n\r\n    // constructor\r\n    var EventProxy = function () {}\r\n\r\n\r\n    // event libary\r\n    EventProxy.prototype.$eventLibary = defaultEventModel\r\n\r\n\r\n    // subscription event\r\n    EventProxy.prototype.on = function (type, handler) {\r\n        limitType(type)\r\n\r\n        if (!isFunction(handler)) {\r\n            throw new Error('The handler of the event of ' + type + ' is not a function')\r\n        }\r\n\r\n        var $eventLibary = this.$eventLibary\r\n        var currEventModel = $eventLibary[type]\r\n\r\n        if (currEventModel) {\r\n            return currEventModel.queue.push(handler)\r\n        }\r\n\r\n        $eventLibary[type] = deepClone($eventLibary['default'])\r\n        $eventLibary[type].type = type\r\n        $eventLibary[type].queue.push(handler)\r\n    }\r\n\r\n\r\n    // only once subscription event\r\n    EventProxy.prototype.once = function (type, handler) {\r\n        var that = this\r\n\r\n        function on() {\r\n            that.off(type, on)\r\n            handler.apply(null, arguments)\r\n        }\r\n\r\n        this.on(type, on)\r\n    }\r\n\r\n\r\n    // remove event\r\n    EventProxy.prototype.off = function (type, handler) {\r\n        // all \r\n        if (!type) {\r\n            this.$eventLibary = defaultEventModel\r\n            return;\r\n        }\r\n\r\n        var eventModel = this.$eventLibary[type]\r\n\r\n        // without event model\r\n        if (!eventModel) return;\r\n\r\n        // specity event\r\n        if (!handler) {\r\n            eventModel.queue = []\r\n            return;\r\n        }\r\n\r\n        // specity handler\r\n        var cbs = eventModel.queue\r\n        var loop = cbs.length\r\n        var cb\r\n\r\n        while (loop--) {\r\n            cb = cbs[loop]\r\n            if (cb === handler) {\r\n                cbs.splice(loop, 1)\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    // global flag, to mark down current event type when event emit\r\n    var eventType\r\n\r\n    // emit event\r\n    EventProxy.prototype.emit = function () {\r\n        var type = eventType = arguments[0]\r\n\r\n        limitType(type)\r\n\r\n        var args = __slice.call(arguments, 1)\r\n        var eventModel = this.$eventLibary[type]\r\n        var queue = eventModel.queue\r\n\r\n        if (eventModel && Array.isArray(queue)) {\r\n            var loop = 0,\r\n                item;\r\n            while (item = queue[loop++]) {\r\n                try {\r\n                    item.apply(null, args)\r\n                } catch (error) {\r\n                    console.warn(\r\n                        'This \\\"' +\r\n                        eventModel.type +\r\n                        '\\\" event handler goes wrong, occured in :\\n\\n' +\r\n                        item.toString() +\r\n                        '\\n\\nThe error info as follow: \\n' +\r\n                        error.stack\r\n                    )\r\n                }\r\n            }\r\n        } else {\r\n            throw new Error('The event of ' + type + ' is not exist')\r\n        }\r\n    }\r\n\r\n    // event queue listen\r\n    EventProxy.prototype.all = function (eventQueue, success) {\r\n        if (!Array.isArray(eventQueue) || !isFunction(success)) return\r\n        var len = eventQueue.length\r\n        var argsCollection = []\r\n       \r\n        var consume = function () {\r\n            // use the global eventType to match type \r\n            // and return index from eventQueue\r\n            var index = findIndex(eventQueue, eventType)\r\n            \r\n            if (index !== false) {\r\n                var ArgsArray = __slice.call(arguments)\r\n                // base on corresponding index from eventQueue,\r\n                // mapping the collection of callback arguments\r\n                argsCollection[index] = ArgsArray\r\n            }\r\n\r\n            // when len is zero mean that \r\n            // the queue of all event executed completely\r\n            --len || success.call(null, flattening(argsCollection))\r\n        }\r\n\r\n        if (len) {\r\n            var i = 0\r\n            var key\r\n            while (key = eventQueue[i++]) {\r\n                this.once(key, consume)\r\n            }\r\n        }\r\n    }\r\n\r\n    return EventProxy\r\n})"]}