{"version":3,"sources":["EventProxy.js"],"names":["root","factory","define","amd","exports","_typeof","module","EventProxy","global","window","undefined","limitType","type","Error","isFunction","v","__slice","Array","prototype","slice","$eventLibary","default","queue","isOnce","on","handler","this","currEventModel","push","src","temp","key","JSON","parse","stringify","deepClone","once","emit","arguments","args","call","eventModel","$aboutAll","allEventQueueIndex","arr","i","length","findIndex","eventQueue","$emitAll","isArray","$emitNormal","callBackArgs","success","reset","model","parameter","item","loop","apply","index","splice","flattening","newArr","len","hasArray","concat","all"],"mappings":"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","file":"EventProxy.min.js","sourcesContent":["(function (root, factory) {\r\n    if (typeof define === 'function' && define.amd) {\r\n        define(function () {\r\n            return factory(root);\r\n        });\r\n    } else if (typeof exports === \"object\" && typeof module !== \"undefined\") {\r\n        module.exports = factory(root);\r\n    } else {\r\n        root.EventProxy = factory(root);\r\n    }\r\n})(typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : this, function (window) {\r\n\r\n    //限制类型\r\n    var limitType = function (type) {\r\n        if (type == 'default') throw new Error('The 1st argument must be a string except default')\r\n    }\r\n\r\n    var isFunction = function (v) {\r\n        return typeof v === 'function';\r\n    }\r\n\r\n    var __slice = Array.prototype.slice\r\n\r\n    //深度复制\r\n    var deepClone = function (src) {\r\n        var temp = {}\r\n        for (var key in src) {\r\n            temp[key] = src[key]\r\n        }\r\n        return JSON.parse(JSON.stringify(temp))\r\n    }\r\n\r\n    //将嵌套数组扁平化 例如：[[100, [102, 103]], 400, [500, 600]] -> [100, 102, 103, 400, 500, 600]\r\n    var flattening = function (arr) {\r\n        var newArr = []\r\n        var len = arr.length\r\n        var hasArray = false\r\n        for (var i = 0; i < len; i++) {\r\n            var item = arr[i]\r\n            if (Array.isArray(item)) {\r\n                newArr = newArr.concat(item)\r\n                hasArray = true\r\n            } else {\r\n                newArr.push(item)\r\n            }\r\n        }\r\n        if (!hasArray) return newArr\r\n        return flattening(newArr)\r\n    }\r\n\r\n    var findIndex = function (arr, key) {\r\n        for (var i = 0; i < arr.length; i++) {\r\n            if (arr[i] == key) return i\r\n        }\r\n        return false\r\n    }\r\n\r\n\r\n    //构造器\r\n    var EventProxy = function () {}\r\n\r\n\r\n    //事件库\r\n    EventProxy.prototype.$eventLibary = {\r\n        'default': {\r\n            type: 'default',\r\n            queue: [],\r\n            isOnce: false\r\n        }\r\n    }\r\n\r\n\r\n    //订阅事件\r\n    EventProxy.prototype.on = function (type, handler) {\r\n        limitType(type)\r\n\r\n        if (!isFunction(handler)) {\r\n            throw new Error('The handler of the event of ' + type + ' is not a function')\r\n        }\r\n\r\n        var $eventLibary = this.$eventLibary\r\n        var currEventModel = $eventLibary[type]\r\n        if (currEventModel) {\r\n            return currEventModel.queue.push(handler)\r\n        }\r\n        $eventLibary[type] = deepClone($eventLibary['default'])\r\n        $eventLibary[type].type = type\r\n        $eventLibary[type].queue.push(handler)\r\n    }\r\n\r\n\r\n    //订阅事件 只触发一次\r\n    EventProxy.prototype.once = function (type, handler) {\r\n        this.on(type, handler)\r\n        this.$eventLibary[type].isOnce = true\r\n    }\r\n\r\n\r\n    //事件触发\r\n    EventProxy.prototype.emit = function () {\r\n        var type = arguments[0]\r\n        limitType(type)\r\n        var args = __slice.call(arguments, 1)\r\n        var eventModel = this.$eventLibary[type]\r\n        var $aboutAll = this.$aboutAll\r\n        var allEventQueueIndex = findIndex($aboutAll.eventQueue, type)\r\n\r\n        if (allEventQueueIndex !== false) {\r\n            this.$emitAll($aboutAll, args, allEventQueueIndex);\r\n        } else if (eventModel && Array.isArray(eventModel.queue) && eventModel.queue.length > 0) {\r\n            this.$emitNormal(eventModel, args)\r\n        } else {\r\n            throw new Error('The event of ' + type + ' is not exist')\r\n        }\r\n    }\r\n\r\n\r\n    EventProxy.prototype.$aboutAll = {\r\n        eventQueue: [],\r\n        callBackArgs: [],\r\n        success: null,\r\n        reset: function () {\r\n            this.eventQueue = []\r\n            this.callBackArgs = []\r\n            this.success = null\r\n        }\r\n    }\r\n\r\n\r\n    EventProxy.prototype.$emitNormal = function (model, parameter) {\r\n        var isOnce = model.isOnce\r\n        if (isOnce === 'ran') return;\r\n        var loop = 0,\r\n            item;\r\n        var queue = model.queue\r\n        while (item = queue[loop++]) {\r\n            item.apply(null, parameter)\r\n        }\r\n        if (isOnce) model.isOnce = 'ran'\r\n    }\r\n\r\n\r\n    EventProxy.prototype.$emitAll = function ($aboutAll, parameter, index) {\r\n        var eventQueue = $aboutAll.eventQueue\r\n        var callBackArgs = $aboutAll.callBackArgs\r\n        eventQueue.splice(index, 1)\r\n        callBackArgs[index] = parameter\r\n        //All事件队列已全部发布标志\r\n        if (eventQueue.length == 0) {\r\n            //合并参数，触发success回调，重置有关all的辅助参数\r\n            $aboutAll.callBackArgs = flattening(callBackArgs)\r\n            $aboutAll.success.call(null, $aboutAll.callBackArgs)\r\n            this.$aboutAll.reset()\r\n        }\r\n    }\r\n\r\n\r\n    //当eventQueue触发完后时，调用success\r\n    EventProxy.prototype.all = function (eventQueue, success) {\r\n        if (!Array.isArray(eventQueue) || !isFunction(success)) return\r\n        var $aboutAll = this.$aboutAll\r\n        $aboutAll.eventQueue = $aboutAll.eventQueue.concat(eventQueue)\r\n        $aboutAll.success = success\r\n    }\r\n\r\n    return EventProxy\r\n})"]}